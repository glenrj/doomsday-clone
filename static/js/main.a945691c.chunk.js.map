{"version":3,"sources":["components/Login.js","components/Intro.js","firebase.js","components/List.js","components/Form.js","components/Memo.js","components/Bunker.js","components/Footer.js","components/Header.js","components/MapDirections.js","components/Map.js","App.js","serviceWorker.js","index.js"],"names":["Login","react_default","a","createElement","className","this","props","userName","onClick","logout","login","guest","Component","Intro","firebase","initializeApp","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","List","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","handleClick","event","list","target","name","database","ref","concat","choice","remove","pageRefresh","on","response","data","val","listItems","entry","push","key","textBox","isChecked","checked","setState","updateCheck","checkboxID","dbRef","once","update","evaluateIfChecked","item","state","prevProps","_this2","map","items","type","id","onChange","displayName","htmlFor","Form","handleSubmit","preventDefault","node","then","handleChange","defineProperty","value","Fragment","action","onSubmit","label","required","pattern","title","Memo","memo","memoItems","Bunker","components_Form","components_List","components_Memo","Footer","Header","user","MapDirections","_this$setState","getMapInfo","getDirections","userInput","showResults","axios","method","url","outFormat","params","unit","from","to","bunkerAddress","res","mapInfo","route","legs","userMapInfo","catch","err","console","log","directions","maneuvers","userDirections","setBunkerAddress","bunker","userAddress","data-simplebar","data-simplebar-auto-hide","placeholder","src","alt","info","totalDistance","distance","toFixed","formattedTime","path","i","iconUrl","href","mapUrl","narrative","Map","getMap","components_MapDirections","provider","auth","GoogleAuthProvider","App","signInWithPopup","result","signOut","setBunker","bunkerChoice","onAuthStateChanged","components_Header","components_Intro","defaultChecked","components_Bunker","components_Map","components_Login","components_Footer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"4UA4BeA,2LApBX,OACEC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,uBAAJ,SACAF,EAAAC,EAAAC,cAAA,qDACAF,EAAAC,EAAAC,cAAA,iEACCE,KAAKC,MAAMC,SACVN,EAAAC,EAAAC,cAAA,UAAQK,QAASH,KAAKC,MAAMG,QAA5B,WAEAR,EAAAC,EAAAC,cAAA,UAAQK,QAASH,KAAKC,MAAMI,MAAON,UAAU,wBAA7C,UAIFH,EAAAC,EAAAC,cAAA,UAAQK,QAASH,KAAKC,MAAMK,MAAOP,UAAU,eAA7C,iBAdYQ,cCOLC,2LARX,OACEZ,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,UAAIF,EAAAC,EAAAC,cAAA,uBAAJ,iBAJYS,cCQlBE,IAASC,cARI,CACXC,OAAQ,0CACRC,WAAY,oCACZC,YAAa,2CACbC,UAAW,oBACXC,cAAe,gCACfC,kBAAmB,iBAIRP,QAAf,ECuGeQ,qBA9Gb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnB,KAAAiB,IACZC,EAAAC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAF,GAAAM,KAAAvB,QAMFwB,YAAc,SAACC,GAGb,IAAMC,EAAOD,EAAME,OAAOC,KAEZnB,EAASoB,WAAWC,IAApB,GAAAC,OAA2Bb,EAAKjB,MAAM+B,OAAtC,UAAAD,OAAqDL,IAC7DO,UAbMf,EAqBdgB,YAAc,WAEEzB,EAASoB,WAAWC,IAApB,GAAAC,OAA2Bb,EAAKjB,MAAM+B,OAAtC,UAERG,GAAG,QAAS,SAAAC,GAChB,IAAMC,EAAOD,EAASE,MAEhBC,EAAY,GAGlB,IAAK,IAAIC,KAASH,EAEhBE,EAAUE,KAAK,CAEbC,IAAKF,EAGLG,QAASN,EAAKG,GAAOG,QACrBzC,SAAUmC,EAAKG,GAAOtC,SACtB0C,UAAWP,EAAKG,GAAOK,UAI3B3B,EAAK4B,SAAS,CACZpB,KAAMa,OA7CErB,EAyDd6B,YAAc,SAACC,GAEb,IAAMC,EAAQxC,EAASoB,WAAWC,IAApB,GAAAC,OAA2Bb,EAAKjB,MAAM+B,OAAtC,UAAAD,OAAqDiB,IACnEC,EAAMC,KAAK,QAAS,SAAAd,GAClB,IAAMQ,EAAYR,EAASE,MAAMO,QACjCI,EAAME,OAAO,CAACN,SAAUD,OA9Dd1B,EAkEdkC,kBAAoB,SAACC,GAEL5C,EAASoB,WAAWC,IAApB,GAAAC,OAA2Bb,EAAKjB,MAAM+B,OAAtC,UAAAD,OAAqDsB,EAArD,aACRlB,GAAG,QAAS,SAAAC,GAChB,OAAOA,EAASE,SApElBpB,EAAKoC,MAAQ,CACX5B,KAAM,IAHIR,mFAkBZlB,KAAKkC,yDAgCYqB,GACbvD,KAAKC,MAAM+B,SAAWuB,EAAUvB,QAClChC,KAAKkC,+CAuBA,IAAAsB,EAAAxD,KAEP,OACEJ,EAAAC,EAAAC,cAAA,WAASC,UAAU,SACjBH,EAAAC,EAAAC,cAAA,UAEGE,KAAKsD,MAAM5B,KAAK+B,IAAI,SAAAC,GACnB,OAEE9D,EAAAC,EAAAC,cAAA,MAAI4C,IAAKgB,EAAMhB,IAAK3C,UAAU,YAE5BH,EAAAC,EAAAC,cAAA,SAAO6D,KAAK,WACZC,GAAIF,EAAMhB,IACVmB,SAAU,WAAOL,EAAKT,YAAYW,EAAMhB,MACxCG,QAASa,EAAMd,YAKfhD,EAAAC,EAAAC,cAAA,SAAI4D,EAAMxD,SAAV,KAAsBwD,EAAMxD,UAAYsD,EAAKvD,MAAMC,SAAS4D,YAAclE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAa6B,KAAM8B,EAAMhB,IAAKvC,QAASqD,EAAKhC,aAA9D,KAAwF,MAElK5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,SAAOC,UAAU,gBAAgBgE,QAASL,EAAMhB,KAAMgB,EAAMf,sBAlG3DpC,sBC8EJyD,6BA7Eb,SAAAA,EAAY/D,GAAM,IAAAiB,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnB,KAAAgE,IAChB9C,EAAAC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAA6C,GAAAzC,KAAAvB,QAQFiE,aAAe,SAACxC,GAEdA,EAAMyC,iBAEQzD,EAASoB,WAAWC,IAApB,GAAAC,OAA2Bb,EAAKjB,MAAM+B,OAAtC,KAAAD,OAAgDb,EAAKjB,MAAMkE,OAEnE1B,KAAK,CAGTvC,SAAWgB,EAAKjB,MAAMC,SAAS4D,YAC/BnB,QAAWzB,EAAKoC,MAAMX,QACtBE,SAAW,IACVuB,KAAMlD,EAAK4B,SAAS,CACpBH,QAAS,OAtBIzB,EA0BlBmD,aAAe,SAAC5C,GAEdP,EAAK4B,SAAL3B,OAAAmD,EAAA,EAAAnD,CAAA,GACGM,EAAME,OAAOC,KAAOH,EAAME,OAAO4C,SA3BpCrD,EAAKoC,MAAQ,CAEXX,QAAS,GACTE,SAAS,GALK3B,wEAoChB,OACEtB,EAAAC,EAAAC,cAACF,EAAAC,EAAM2E,SAAP,KACE5E,EAAAC,EAAAC,cAAA,QAAM2E,OAAO,SAASC,SAAU1E,KAAKiE,cAEnCrE,EAAAC,EAAAC,cAAA,SAAOiE,QAAQ,WAAW/D,KAAKC,MAAM0E,OAErC/E,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACS,gBAArBC,KAAKC,MAAM0E,MACV/E,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,oFAKAH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,4EAOJH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACbH,EAAAC,EAAAC,cAAA,SACE+D,SAAU7D,KAAKqE,aACfV,KAAK,WACL/B,KAAK,UACLgC,GAAG,UACHgB,UAAQ,EACRC,QAAQ,6CACRC,MAAM,8BACNP,MAAOvE,KAAKsD,MAAMX,UAEpB/C,EAAAC,EAAAC,cAAA,UAAQ6D,KAAK,SAAS5D,UAAU,cAAhC,eApEOQ,cC+EJwE,cA/Eb,SAAAA,IAAc,IAAA7D,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnB,KAAA+E,IACZ7D,EAAAC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAA4D,GAAAxD,KAAAvB,QAMFwB,YAAc,SAACC,GAGb,IAAMuD,EAAOvD,EAAME,OAAOC,KAEZnB,IAASoB,WAAWC,IAApB,GAAAC,OAA2Bb,EAAKjB,MAAM+B,OAAtC,UAAAD,OAAqDiD,IAC7D/C,UAbMf,EAsBdgB,YAAc,WACEzB,IAASoB,WAAWC,IAApB,GAAAC,OAA2Bb,EAAKjB,MAAM+B,OAAtC,UAERG,GAAG,QAAS,SAAAC,GAChB,IAAMC,EAAOD,EAASE,MAEhB2C,EAAY,GAElB,IAAK,IAAIzC,KAASH,EAEhB4C,EAAUxC,KAAK,CAEbC,IAAKF,EAGLG,QAASN,EAAKG,GAAOG,QACrBzC,SAAUmC,EAAKG,GAAOtC,WAI1BgB,EAAK4B,SAAS,CACZkC,KAAMC,OAzCV/D,EAAKoC,MAAQ,CACX0B,KAAM,IAHI9D,mFAmBZlB,KAAKkC,yDA6BYqB,GACbvD,KAAKC,MAAM+B,SAAWuB,EAAUvB,QAClChC,KAAKkC,+CAIA,IAAAsB,EAAAxD,KACP,OACEJ,EAAAC,EAAAC,cAAA,WAASC,UAAU,SACjBH,EAAAC,EAAAC,cAAA,UAEGE,KAAKsD,MAAM0B,KAAKvB,IAAI,SAAAC,GACnB,OACE9D,EAAAC,EAAAC,cAAA,MAAI4C,IAAKgB,EAAMhB,IAAK3C,UAAU,YAE5BH,EAAAC,EAAAC,cAAA,SAAI4D,EAAMxD,SAAV,KAAsBwD,EAAMxD,UAAYsD,EAAKvD,MAAMC,SAAS4D,YAAclE,EAAAC,EAAAC,cAAA,UAAQC,UAAU,aAAa6B,KAAM8B,EAAMhB,IAAKvC,QAASqD,EAAKhC,aAA9D,KAAwF,MAElK5B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACbH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,QAAQ2D,EAAMf,sBAnE1BpC,aCmCJ2E,mLA/BX,OACEtF,EAAAC,EAAAC,cAAA,WAASC,UAAU,iBACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAACqF,EAAD,CACEhB,KAAK,OACLQ,MAAM,cACNzE,SAAUF,KAAKC,MAAMC,SACrB8B,OAAQhC,KAAKC,MAAM+B,SAErBpC,EAAAC,EAAAC,cAACsF,EAAD,CACElF,SAAUF,KAAKC,MAAMC,SACrB8B,OAAQhC,KAAKC,MAAM+B,UAGvBpC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,wBACbH,EAAAC,EAAAC,cAACqF,EAAD,CACEhB,KAAK,OACLQ,MAAM,WACNzE,SAAUF,KAAKC,MAAMC,SACrB8B,OAAQhC,KAAKC,MAAM+B,SAErBpC,EAAAC,EAAAC,cAACuF,EAAD,CACEnF,SAAUF,KAAKC,MAAMC,SACrB8B,OAAQhC,KAAKC,MAAM+B,kBAzBVzB,aCaN+E,2LAbP,OACI1F,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YACdH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,mCAEJF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,SACXH,EAAAC,EAAAC,cAAA,yCARCS,cCYNgF,2LAXX,OACE3F,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAChBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,mBACbH,EAAAC,EAAAC,cAAA,SAAIE,KAAKC,MAAMuF,MACf5F,EAAAC,EAAAC,cAAA,UAAQK,QAASH,KAAKC,MAAMG,QAA4B,SAAnBJ,KAAKC,MAAMuF,KAAkB,SAAW,oBANlEjF,+BC6MNkF,cA3Mb,SAAAA,IAAc,IAAAvE,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnB,KAAAyF,IACZvE,EAAAC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAAsE,GAAAlE,KAAAvB,QAYFqE,aAAe,SAAC5C,GAAU,IAAAiE,EAExBxE,EAAK4B,UAAL4C,EAAA,GAAAvE,OAAAmD,EAAA,EAAAnD,CAAAuE,EACGjE,EAAME,OAAOC,KAAOH,EAAME,OAAO4C,OADpCpD,OAAAmD,EAAA,EAAAnD,CAAAuE,EAAA,cAEejE,EAAME,OAAO4C,OAF5BmB,KAfYxE,EAqBd+C,aAAe,SAACxC,GACdA,EAAMyC,iBACNhD,EAAKyE,aACLzE,EAAK0E,gBACL1E,EAAK4B,SAAS,CACZ+C,UAAW,GACXC,aAAa,KA3BH5E,EA+BdyE,WAAa,WACXI,IAAM,CACJC,OAAQ,MACRC,IAAK,iDACLC,UAAW,OACXC,OAAQ,CACNzD,IAAK,mCACLwD,UAAW,OACXE,KAAM,IACNC,KAAMnF,EAAKoC,MAAMuC,UACjBS,GAAIpF,EAAKoC,MAAMiD,iBAGhBnC,KAAK,SAAAoC,GACJ,IAAMC,EAAUD,EAAInE,KAAKqE,MAAMC,KAC/BzF,EAAK4B,SAAS,CACZ8D,YAAaH,MAGhBI,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MAnDJ5F,EAuDd0E,cAAgB,WACdG,IAAM,CACJC,OAAQ,MACRC,IAAK,kDACLC,UAAW,OACXC,OAAQ,CACNzD,IAAK,mCACLwD,UAAW,OACXE,KAAM,IACNC,KAAMnF,EAAKoC,MAAMuC,UACjBS,GAAIpF,EAAKoC,MAAMiD,iBAGhBnC,KAAK,SAAAoC,GACJ,IAAMS,EAAaT,EAAInE,KAAKqE,MAAMC,KAAK,GAAGO,UAC1ChG,EAAK4B,SAAS,CACZqE,eAAgBF,IAElB/F,EAAK4B,SAAS,CACZ+C,UAAW,GACXC,aAAa,MAGhBe,MAAM,SAAAC,GACLC,QAAQC,IAAIF,MA/EJ5F,EAmFdkG,iBAAmB,WACS,SAAtBlG,EAAKjB,MAAMoH,OACbnG,EAAK4B,SAAS,CACZyD,cAAe,6CACfT,aAAa,IAEgB,SAAtB5E,EAAKjB,MAAMoH,OACpBnG,EAAK4B,SAAS,CACZyD,cAAe,6CACfT,aAAa,IAEgB,SAAtB5E,EAAKjB,MAAMoH,OACpBnG,EAAK4B,SAAS,CACZyD,cAAe,yCACfT,aAAa,IAEgB,QAAtB5E,EAAKjB,MAAMoH,QACpBnG,EAAK4B,SAAS,CACZyD,cAAe,4CACfT,aAAa,KApGjB5E,EAAKoC,MAAQ,CACXkC,KAAM,GACNe,cAAe,GACfV,UAAW,GACXe,YAAa,GACbO,eAAgB,GAChBG,YAAa,GACbxB,aAAa,GATH5E,mFA4GZlB,KAAKoH,8DAGY7D,GACbvD,KAAKC,MAAMoH,SAAW9D,EAAU8D,QAClCrH,KAAKoH,oDAMP,OACExH,EAAAC,EAAAC,cAAA,OACEC,UAAU,WACVwH,kBAAA,EACAC,2BAAyB,SAEzB5H,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,gCAEAF,EAAAC,EAAAC,cAAA,OAAKC,UAAU,aACbH,EAAAC,EAAAC,cAAA,QAAM2E,OAAO,SAASC,SAAU1E,KAAKiE,cACnCrE,EAAAC,EAAAC,cAAA,SACE6D,KAAK,WACL8D,YAAY,oBACZ5D,SAAU7D,KAAKqE,aACfzC,KAAK,YACL2C,MAAOvE,KAAKsD,MAAMuC,UAClBjB,UAAQ,EACR7E,UAAU,cAGdH,EAAAC,EAAAC,cAAA,UAAQC,UAAU,YAAY4D,KAAK,UAAnC,MAKD3D,KAAKsD,MAAMwC,YACVlG,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAA,OACEC,UAAU,WACV2H,IAAG,sDAAA3F,OACD/B,KAAKsD,MAAMgE,YADV,SAAAvF,OAGD/B,KAAKsD,MAAMiD,cAHV,yCAKHoB,IAAI,KAEN/H,EAAAC,EAAAC,cAAA,kBAAUE,KAAKsD,MAAMgE,aACrB1H,EAAAC,EAAAC,cAAA,gBAAQE,KAAKsD,MAAMiD,eAElBvG,KAAKsD,MAAMsD,YAAYnD,IAAI,SAAAmE,GAC1B,IAAMC,EAAgBD,EAAKE,SAASC,QAAQ,GAC5C,OACEnI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SACG8H,EAAKI,cADR,mBACuCH,EAAe,IADtD,UAQNjI,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,wBACCE,KAAKsD,MAAM6D,eAAe1D,IAAI,SAACwE,EAAMC,GACpC,IAAMJ,EAAWG,EAAKH,SAASC,QAAQ,GACvC,OACEnI,EAAAC,EAAAC,cAAA,OAAK4C,IAAKwF,EAAGnI,UAAU,uBACrBH,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,OACE4H,IAAKO,EAAKE,QACVR,IAAI,GACJ5H,UAAU,YAEZH,EAAAC,EAAAC,cAAA,KAAGsI,KAAMH,EAAKI,OAAQV,IAAI,GAAGhG,OAAO,UACjC,IACAsG,EAAKK,UAAW,MAGrB1I,EAAAC,EAAAC,cAAA,SACGmI,EAAKD,cADR,mBACuCF,EADvC,OACqD,UAO7D,cArMcvH,aC8FbgI,6MA5FbC,OAAS,WACP,MAA0B,SAAtBtH,EAAKjB,MAAM+B,OAEXpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,8lBAYAF,EAAAC,EAAAC,cAAA,OACE4H,IAAI,qKACJC,IAAI,uDAIqB,SAAtBzG,EAAKjB,MAAM+B,OAElBpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,mYAQEF,EAAAC,EAAAC,cAAA,OACA4H,IAAI,qKACJC,IAAI,uDAIqB,SAAtBzG,EAAKjB,MAAM+B,OAElBpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,2BACAF,EAAAC,EAAAC,cAAA,wmBAGEF,EAAAC,EAAAC,cAAA,OACA4H,IAAI,iKACJC,IAAI,mDAIqB,QAAtBzG,EAAKjB,MAAM+B,OAElBpC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,0BACAF,EAAAC,EAAAC,cAAA,seAUAF,EAAAC,EAAAC,cAAA,OACE4H,IAAI,oKACJC,IAAI,sDAMV/H,EAAAC,EAAAC,cAAA,uGAKF,OACAF,EAAAC,EAAAC,cAAA,WAASC,UAAU,YACjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACZC,KAAKwI,UAER5I,EAAAC,EAAAC,cAAC2I,EAAD,CAAepB,OAAQrH,KAAKC,MAAM+B,iBAvFtBzB,aCOZmI,EAAW,IAAIjI,IAASkI,KAAKC,mBAC7BD,EAAOlI,IAASkI,OAkHPE,cA9Gb,SAAAA,IAAc,IAAA3H,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAnB,KAAA6I,IACZ3H,EAAAC,OAAAE,EAAA,EAAAF,CAAAnB,KAAAmB,OAAAG,EAAA,EAAAH,CAAA0H,GAAAtH,KAAAvB,QASFK,MAAQ,WACNsI,EAAKG,gBAAgBJ,GAAUtE,KAAK,SAAA2E,GAClC,IAAMvD,EAAOuD,EAAOvD,KACpBtE,EAAK4B,SAAS,CACZ5C,SAAUsF,OAdFtE,EAoBdd,OAAS,WACPuI,EAAKK,UAAU5E,KAAK,WAClBlD,EAAK4B,SAAS,CACZ5C,SAAU,UAvBFgB,EA4BdZ,MAAQ,WAINY,EAAK4B,SAAS,CACZ5C,SAJgB,CAChB4D,YAAa,YA9BH5C,EAqCd+H,UAAY,SAAAxH,GAGV,IAAMyH,EAAezH,EAAME,OAAO4C,MAClCrD,EAAK4B,SAAS,CACZuE,OAAQ6B,KAxCVhI,EAAKoC,MAAQ,CACXpD,SAAU,KACVmH,OAAQ,QAJEnG,mFA+CM,IAAAsC,EAAAxD,KAElB2I,EAAKQ,mBAAmB,SAAA3D,GAClBA,GACFhC,EAAKV,SAAS,CACZ5C,SAAUsF,uCAQhB,OAEE5F,EAAAC,EAAAC,cAAA,OAAKC,UAAS,SAAAgC,OAAW/B,KAAKsD,MAAM+D,SACjCrH,KAAKsD,MAAMpD,SACVN,EAAAC,EAAAC,cAACsJ,EAAD,CAAQhJ,OAAQJ,KAAKI,OAAQoF,KAAMxF,KAAKsD,MAAMpD,SAAS4D,cACrD,KACJlE,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACbH,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,WAEGE,KAAKsD,MAAMpD,SACVN,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAACuJ,EAAD,MACAzJ,EAAAC,EAAAC,cAAA,QAAMC,UAAU,cAAc0E,OAAO,GAAGZ,SAAU7D,KAAKiJ,WAEnDrJ,EAAAC,EAAAC,cAAA,SAAO6D,KAAK,QAAQ/B,KAAK,eAAe0H,eAAe,OAAO1F,GAAG,OAAOW,MAAM,SAC9E3E,EAAAC,EAAAC,cAAA,SAAOiE,QAAQ,QAAOnE,EAAAC,EAAAC,cAAA,sBAAtB,WAEAF,EAAAC,EAAAC,cAAA,SAAO6D,KAAK,QAAQ/B,KAAK,eAAegC,GAAG,OAAOW,MAAM,SACxD3E,EAAAC,EAAAC,cAAA,SAAOiE,QAAQ,QAAOnE,EAAAC,EAAAC,cAAA,sBAAtB,WAEAF,EAAAC,EAAAC,cAAA,SAAO6D,KAAK,QAAQ/B,KAAK,eAAegC,GAAG,OAAOW,MAAM,SACxD3E,EAAAC,EAAAC,cAAA,SAAOiE,QAAQ,QAAOnE,EAAAC,EAAAC,cAAA,sBAAtB,WAEAF,EAAAC,EAAAC,cAAA,SAAO6D,KAAK,QAAQ/B,KAAK,eAAegC,GAAG,MAAMW,MAAM,QAX3D,IAWoE3E,EAAAC,EAAAC,cAAA,SAAOiE,QAAQ,OAAMnE,EAAAC,EAAAC,cAAA,qBAArB,YAGpEF,EAAAC,EAAAC,cAACyJ,EAAD,CACErJ,SAAUF,KAAKsD,MAAMpD,SACrB8B,OAAQhC,KAAKsD,MAAM+D,SAErBzH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cACbH,EAAAC,EAAAC,cAAC0J,EAAD,CAAKxH,OAAQhC,KAAKsD,MAAM+D,WAI5BzH,EAAAC,EAAAC,cAAC2J,EAAD,CACEvJ,SAAUF,KAAKsD,MAAMpD,SACrBG,MAAOL,KAAKK,MACZC,MAAON,KAAKM,UAKpBV,EAAAC,EAAAC,cAAC4J,EAAD,eAzGQnJ,aCJEoJ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAOrK,EAAAC,EAAAC,cAACoK,EAAD,MAASC,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMnG,KAAK,SAAAoG,GACjCA,EAAaC","file":"static/js/main.a945691c.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport '../styles/login.css';\n\n\n//login logout functions were written in App.js and will be passed here as props\n\nclass Login extends Component {\n  render(){\n    return (\n      <div className=\"loginIntro\">\n        <h1><span>to doom</span> list</h1>\n        <h2>What will you need to survive doomsday?</h2>\n        <p>Join others in preparation for the end of the world!</p>\n        {this.props.userName ? \n          <button onClick={this.props.logout}>Log Out</button>\n         : \n          <button onClick={this.props.login} className=\"loginButton loginOne\">\n            Log In\n          </button>\n        }\n        <button onClick={this.props.guest} className=\"loginButton\">\n          Guest\n        </button>\n      </div>\n    );\n  } //the button onclick functions are in App. So we're passing those functions in by props. The username is put in App (not login) bcuz we'll be accessing it in both components\n}\n\nexport default Login;","import React, { Component } from \"react\";\nimport intro from \"../styles/intro.css\";\n\nclass Intro extends Component {\n  render() {\n    return (\n      <div className=\"intro\">\n        <h1><span>to doom</span> list</h1>\n      </div>\n    );\n  }\n}\n\nexport default Intro;\n","import firebase from 'firebase';\n\n// Initialize Firebase\n  var config = {\n    apiKey: \"AIzaSyC70TTBwffVbpvurV5YziIvV67yAYscHF4\",\n    authDomain: \"doomsday-jamboree.firebaseapp.com\",\n    databaseURL: \"https://doomsday-jamboree.firebaseio.com\",\n    projectId: \"doomsday-jamboree\",\n    storageBucket: \"doomsday-jamboree.appspot.com\",\n    messagingSenderId: \"775461510258\"\n  };\n  firebase.initializeApp(config);\n\nexport default firebase;\n","import React, { Component } from 'react';\nimport firebase from '../firebase.js';\nimport '../styles/lists.css';\n\n\nclass List extends Component {\n  constructor() {\n    super();\n    this.state = {\n      list: []\n    }\n  }\n\n  handleClick = (event) => {\n    //get name from button\n    //save name as variable\n    const list = event.target.name\n    //use variable to target node in firebase\n    const dbRef = firebase.database().ref(`${this.props.choice}/list/${list}`);\n    dbRef.remove();\n  }\n\n  // create a variable to hold the reference of the database\n  componentDidMount() {\n    this.pageRefresh();\n  }\n  \n  pageRefresh = () => {\n    // get list from firebase to display on page\n    const dbRef = firebase.database().ref(`${this.props.choice}/list`);\n    // get whole List from database\n    dbRef.on('value', response => {\n      const data = response.val();\n      // create a new array to store our mapped values\n      const listItems = [];\n\n      // loop through each object in data (object = entry in firebase)\n      for (let entry in data) {\n        // push the following info into the listItems array we created above\n        listItems.push({\n          // take values from each entry and assign it a variable \n          key: entry,\n          // data is 'List' from firebase, entry is each unique entry, textBox is the name of the value\n          // [entry] needed because we don't know the exact name\n          textBox: data[entry].textBox,\n          userName: data[entry].userName,\n          isChecked: data[entry].checked\n        })\n      }\n      // update state of list to listItems so we have access to it outside the function\n      this.setState({\n        list: listItems\n      })\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.choice !== prevProps.choice) {\n      this.pageRefresh();\n  }\n}\n\n\n  updateCheck = (checkboxID) => {\n    //once checkbox is checked, use ID to set firebase \"checked\" value to true\n    const dbRef = firebase.database().ref(`${this.props.choice}/list/${checkboxID}`);\n    dbRef.once('value', response => {\n      const isChecked = response.val().checked\n      dbRef.update({checked: !isChecked})\n    })\n    }\n\n  evaluateIfChecked = (item) => {\n    // { this.state.list[item].isChecked ? checked}\n    const dbRef = firebase.database().ref(`${this.props.choice}/list/${item}/checked`);\n    dbRef.on('value', response => {\n      return(response.val())\n    })\n  }\n\n\n  render() {\n\n    return (\n      <section className='lists'>\n        <ul>\n          {/* map over the list that has the information from listItem and return for each item an li object that has all the properties below */}\n          {this.state.list.map(items => {\n            return (\n              // the key is 'entry' from the for loop above\n              <li key={items.key} className=\"clearfix\">\n                {/* create a checkbox with attributes of id to match the labels id */}\n                <input type='checkbox' \n                id={items.key} \n                onChange={() => {this.updateCheck(items.key)}}\n                checked={items.isChecked} />\n\n              {/*each item is pushed with a checked:false property.\n              create function */} \n\n                <p>{items.userName}  {items.userName == this.props.userName.displayName ? <button className='deleteItem' name={items.key} onClick={this.handleClick}>x</button> : null}</p>\n\n                <div className=\"items\">\n                  <label className=\"item listItem\" htmlFor={items.key}>{items.textBox}</label>\n                </div>\n                {/* give button a name to target it without using an id and use that name to delete item later from firebase */}\n                {/* userName.displayName gets actual name inside of user object that was passed in through props onChange={this.updateCheck(items.key)}*/}\n              </li>\n            )\n          })}\n        </ul>\n      </section>\n    )\n  }\n}\n\nexport default List;","import React, { Component } from 'react';\nimport firebase from '../firebase.js';\nimport '../styles/form.css';\nimport '../styles/media.css';\n\nclass Form extends Component {\n  constructor(props){\n    super()\n    this.state = {\n      //setState to emty string\n      textBox: '',\n      checked: false,\n    }\n  }\n\n  handleSubmit = (event) => {\n    //not reloding page\n    event.preventDefault();\n    //create a varible that hold the refrince of the database \n    const dbRef = firebase.database().ref(`${this.props.choice}/${this.props.node}`)\n    //pushing users input to firebase\n    dbRef.push({\n      //Targeting the user displayName insted of the whole object\n      // create userName and textBox fields in quotes as a string to have that be the name in firebase for each entry\n      'userName':this.props.userName.displayName,\n      'textBox': this.state.textBox,\n      'checked': false\n    }).then (this.setState({\n       textBox: \"\"\n    }))\n  }\n\n  handleChange = (event) => {\n    //updating the state we type\n    this.setState({\n      [event.target.name]: event.target.value\n    })\n  }\n\n\n\n  render(){\n    return (\n      <React.Fragment>\n        <form action='submit' onSubmit={this.handleSubmit}>\n          {/* label gets it's text value from the label attribute that we set and passed from App.js */}\n          <label htmlFor='textBox'>{this.props.label}</label>\n\n          <div className='introWrapper'>\n            {this.props.label === 'add to list' ? (\n              <p className='listIntro'>\n                Keep track of who is responsible for the survival items in\n                your Doomsday Bunker.\n              </p>\n            ) : (\n              <p className='listIntro'>\n                Have a tip? Write a memo for your bunker-mates to give them\n                a heads up.\n              </p>\n            )}\n          </div>\n\n          <div className='textarea clearflex'>\n            <input\n              onChange={this.handleChange}\n              type='textarea'\n              name='textBox'\n              id='textBox'\n              required\n              pattern='^[A-Za-z0-9_\\.-?!$][a-zA-Z0-9_\\.-?!$ ]+$'\n              title='Please type an item or memo'\n              value={this.state.textBox}\n            />\n            <button type='submit' className='formButton'>\n              +\n            </button>\n          </div>\n        </form>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Form;","import React, { Component } from 'react';\nimport firebase from 'firebase';\nimport '../styles/lists.css';\n\nclass Memo extends Component {\n  constructor() {\n    super()\n    this.state = {\n      memo: []\n    }\n  }\n\n  handleClick = (event) => {\n    //get name from button\n    //save name as variable\n    const memo = event.target.name\n    //use variable to target node in firebase\n    const dbRef = firebase.database().ref(`${this.props.choice}/memo/${memo}`);\n    dbRef.remove();\n  }\n\n  // create a variable to hold the reference of the database\n  // get list from firebase to display on page\n  componentDidMount() {\n    this.pageRefresh();\n  }\n\n  pageRefresh = () => {\n    const dbRef = firebase.database().ref(`${this.props.choice}/memo`);\n    // get whole List from database\n    dbRef.on('value', response => {\n      const data = response.val();\n      // create a new array to store our mapped values\n      const memoItems = [];\n      // loop through each object in data (object = entry in firebase)\n      for (let entry in data) {\n        // push the following info into the listItems array we created above\n        memoItems.push({\n          // take values from each entry and assign it a variable \n          key: entry,\n          // data is 'List' from firebase, entry is each unique entry, textBox is the name of the value\n          // [entry] needed because we don't know the exact name\n          textBox: data[entry].textBox,\n          userName: data[entry].userName\n        })\n      }\n      // update state of list to listItems so we have access to it outside the function\n      this.setState({\n        memo: memoItems\n      })\n    })\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.choice !== prevProps.choice) {\n      this.pageRefresh();\n    }\n  }\n\n  render() {\n    return (\n      <section className='lists'>\n        <ul>\n          {/* map over the list that has the information from listItem and return for each item an li object that has all the properties below */}\n          {this.state.memo.map(items => {\n            return (\n              <li key={items.key} className=\"clearfix\">\n                {/* create a checkbox with attributes of id to match the labels id */}\n                <p>{items.userName}  {items.userName == this.props.userName.displayName ? <button className='deleteItem' name={items.key} onClick={this.handleClick}>x</button> : null}</p>\n                  {/* give button a name to target it without using an id and use that name to delete item later from firebase */}\n                <div className=\"items\">\n                  <p className=\"item\">{items.textBox}</p>\n                </div>\n              </li>\n            )\n          })}\n        </ul>\n      </section>\n\n    )\n  }\n}\n\n\nexport default Memo;","import React, { Component } from \"react\";\nimport List from \"./List.js\";\nimport Form from \"./Form.js\";\nimport Memo from \"./Memo.js\";\n\n//complex component that holds the Form component - one with the list component and one with the memo component.\nclass Bunker extends Component {\n  render() {\n    return (\n      <section className=\"form clearfix\">\n        <div className=\"forms form1 clearfix\">\n          <Form\n            node=\"list\"\n            label=\"add to list\"\n            userName={this.props.userName}\n            choice={this.props.choice}\n          />\n          <List \n            userName={this.props.userName}\n            choice={this.props.choice}  \n          />\n        </div>\n        <div className=\"forms form2 clearfix\">\n          <Form \n            node=\"memo\" \n            label=\"add memo\" \n            userName={this.props.userName} \n            choice={this.props.choice} \n          />\n          <Memo \n            userName={this.props.userName}\n            choice={this.props.choice}  \n          />\n        </div>\n      </section>\n    );\n  }\n}\n\nexport default Bunker;\n","import React, { Component } from 'react';\nimport '../styles/footer.css';\n\n\nclass Footer extends Component {\n    render() {\n        return (\n            <footer className='clearfix'>\n                <div className='left'>\n                    <p>Doomsday Jamboree Co.</p>\n                </div>\n                <div className=\"right\">\n                    <p>&copy; doomsday squad</p>\n                </div>\n            </footer>\n        )\n    }\n}\n\nexport default Footer;","import React, { Component } from 'react';\nimport '../styles/header.css';\n\nclass Header extends Component {\n  render() {\n    return (\n      <header className='clearfix'>\n        <div className='content wrapper'>\n          <p>{this.props.user}</p>\n          <button onClick={this.props.logout}>{this.props.user == 'Guest' ? 'Log In' : 'Log Out'}</button>\n        </div>\n      </header>\n    )\n  }\n}\n\nexport default Header;","import React, { Component } from 'react';\nimport axios from \"axios\";\nimport '../styles/map.css';\n\nclass MapDirections extends Component {\n  constructor() {\n    super();\n    this.state = {\n      user: '',\n      bunkerAddress: '',\n      userInput: '',\n      userMapInfo: [],\n      userDirections: [],\n      userAddress: '',\n      showResults: false\n    };\n  }\n\n  handleChange = (event) => {\n    // when onChange occurs, target the input's value\n    this.setState({\n      [event.target.name]: event.target.value,\n      userAddress: event.target.value,\n    });\n  };\n\n  handleSubmit = (event) => {\n    event.preventDefault();\n    this.getMapInfo();\n    this.getDirections();\n    this.setState({\n      userInput: '',\n      showResults: true,\n    });\n  };\n\n  getMapInfo = () => {\n    axios({\n      method: 'GET',\n      url: 'http://www.mapquestapi.com/directions/v2/route',\n      outFormat: 'json',\n      params: {\n        key: 'ovz829u0JrdZW3gN7GNadvR7BdAYb1n4',\n        outFormat: 'json',\n        unit: 'k',\n        from: this.state.userInput,\n        to: this.state.bunkerAddress\n      }\n    })\n      .then(res => {\n        const mapInfo = res.data.route.legs;\n        this.setState({\n          userMapInfo: mapInfo\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  getDirections = () => {\n    axios({\n      method: 'GET',\n      url: 'https://www.mapquestapi.com/directions/v2/route',\n      outFormat: 'json',\n      params: {\n        key: 'jAuMBn6SemqglGEvttlGDZiDyMwOn7SL',\n        outFormat: 'json',\n        unit: 'k',\n        from: this.state.userInput,\n        to: this.state.bunkerAddress\n      }\n    })\n      .then(res => {\n        const directions = res.data.route.legs[0].maneuvers;\n        this.setState({\n          userDirections: directions\n        });\n        this.setState({\n          userInput: '',\n          showResults: true\n        });\n      })\n      .catch(err => {\n        console.log(err);\n      });\n  };\n\n  setBunkerAddress = () => {\n    if (this.props.bunker === 'alex') {\n      this.setState({\n        bunkerAddress: '483 Queen Street West, Toronto, ON M5V 2A9',\n        showResults: false\n      });\n    } else if (this.props.bunker === 'glen') {\n      this.setState({\n        bunkerAddress: '955 Lake Shore Blvd W, Toronto, ON M6K 3B9',\n        showResults: false\n      });\n    } else if (this.props.bunker === 'oiza') {\n      this.setState({\n        bunkerAddress: '1100 W.Ruins Drive, Coolidge, AZ 85128',\n        showResults: false\n      });\n    } else if (this.props.bunker === 'zoe') {\n      this.setState({\n        bunkerAddress: 'Highway 16 East, British Columbia, Canada',\n        showResults: false\n      });\n    }\n  }\n\n  componentDidMount() {\n    this.setBunkerAddress();\n  }\n\n  componentDidUpdate(prevProps) {\n    if (this.props.bunker !== prevProps.bunker) {\n      this.setBunkerAddress();\n    }\n  }\n\n\n  render() {\n    return (\n      <div\n        className='mapRight'\n        data-simplebar\n        data-simplebar-auto-hide='false'\n      >\n        <div>\n          <h2>How do I get here?</h2>\n\n          <div className='mapParent'>\n            <form action='submit' onSubmit={this.handleSubmit}>\n              <input\n                type='textarea'\n                placeholder='Type your address'\n                onChange={this.handleChange}\n                name='userInput'\n                value={this.state.userInput}\n                required\n                className='mapInput'\n              />\n            </form>\n            <button className='mapSubmit' type='submit'>\n              +\n            </button>\n          </div>\n\n          {this.state.showResults ? (\n            <div className='mapResults'>\n              <img\n                className='mapImage'\n                src={`https://www.mapquestapi.com/staticmap/v5/map?start=${\n                  this.state.userAddress\n                }&end=${\n                  this.state.bunkerAddress\n                }&key=jAuMBn6SemqglGEvttlGDZiDyMwOn7SL`}\n                alt=''\n              />\n              <p>From: {this.state.userAddress}</p>\n              <p>To: {this.state.bunkerAddress}</p>\n\n              {this.state.userMapInfo.map(info => {\n                const totalDistance = info.distance.toFixed(1);\n                return (\n                  <div>\n                    <p>\n                      {info.formattedTime} (hr:min:sec) - {totalDistance}{' '}\n                      kms\n                    </p>\n                  </div>\n                );\n              })}\n\n              <div>\n                <h2>Directions</h2>\n                {this.state.userDirections.map((path, i) => {\n                  const distance = path.distance.toFixed(1);\n                  return (\n                    <div key={i} className='clearfix directions'>\n                      <div>\n                        <img\n                          src={path.iconUrl}\n                          alt=''\n                          className='symbols'\n                        />\n                        <a href={path.mapUrl} alt='' target='_blank'>\n                          {' '}\n                          {path.narrative}{' '}\n                        </a>\n                      </div>\n                      <p>\n                        {path.formattedTime} (hr:min:sec) - {distance} kms{' '}\n                      </p>\n                    </div>\n                  );\n                })}\n              </div>\n            </div>\n          ) : null}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default MapDirections;\n","import React, { Component } from 'react';\nimport MapDirections from '../components/MapDirections';\nimport '../styles/map.css';\n\n\nclass Map extends Component {\n  getMap = () => {\n    if (this.props.choice === 'alex') {\n      return (\n        <div>\n          <h2>Alex's Bunker</h2>\n          <p>\n            Alex’s bunker is found in the HackerYou building on Queen\n            Street West in Toronto and was created as part of a pilot\n            project for future bunker initiatives. This 15-storey\n            underground luxury compound is able to withstand everything\n            from extreme weather like tornadoes, to a full blown nuclear\n            attack. It also comes equipped with full fibre optic intranet\n            and is fully decked out in amenities designed to appeal to our\n            customer base. The compounds consist of a cinema, indoor pool\n            and spa, medical first aid centre, bar, rock climbing wall,\n            gym, and library. Inquire now for availability.\n          </p>\n          <img\n            src='https://www.mapquestapi.com/staticmap/v5/map?key=jAuMBn6SemqglGEvttlGDZiDyMwOn7SL&locations=483 Queen Street West, Toronto, ON M5V 2A9&defaultMarker=marker-red-lg'\n            alt='map of 483 Queen Street West, Toronto, ON M5V 2A9'\n          />\n        </div>\n      );\n    } else if (this.props.choice === 'glen') {\n      return (\n        <div>\n          <h2>Glen's Bunker</h2>\n          <p>\n            Glen’s bunker is conveniently located in Toronto, close to\n            downtown as well as the lake. Inside of the abandoned Ontario\n            Place grounds, this doomsday hideout is tucked inside what was\n            known as the ‘Cinesphere’. This large yet secure building is\n            good for hoarding community resources for the coming\n            apocalypse as well as hosting a successful Doomsday Jamboree.\n          </p>\n            <img\n            src='https://www.mapquestapi.com/staticmap/v5/map?key=jAuMBn6SemqglGEvttlGDZiDyMwOn7SL&locations=955 Lake Shore Blvd W, Toronto, ON M6K 3B9&defaultMarker=marker-red-lg'\n            alt='map of 955 Lake Shore Blvd W, Toronto, ON M6K 3B9'\n            />\n        </div>\n      );\n    } else if (this.props.choice === 'oiza') {\n      return (\n        <div>\n          <h2>Oiza's Bunker</h2>\n          <p>\n            Oiza’s bunker is a secret state-of-the-art fortress strategically chosen to ensure maximum survival during the coming apocalypse. Featuring the perfect soil for agricultural advancements, our new residence also boasts a natural resistance to the predicted unending winters and floods. In other words, bring your shorts! Approved residents will depart from the Casa Grande Ruins in Coolidge at 8pm on a single date that will be shared four days in advance by encrypted mail. No other passage will be provided to this bunker. Please remember to bring with you one week’s supply of bottled water.\n          </p>\n            <img\n            src='https://www.mapquestapi.com/staticmap/v5/map?key=jAuMBn6SemqglGEvttlGDZiDyMwOn7SL&locations=1100 W.Ruins Drive, Coolidge, AZ 85128&defaultMarker=marker-red-lg'\n            alt='map of 1100 W.Ruins Drive, Coolidge, AZ 85128'\n            />\n        </div>\n      );\n    } else if (this.props.choice === 'zoe') {\n      return (\n        <div>\n          <h2>Zoe's Bunker</h2>\n          <p>\n            Zoe's bunker is located in The Ancient Forest off of highway\n            16 east, BC. but good luck finding it! The bunker is a secure\n            base, undetectibbly hidden from the public eye in the dense\n            forest large enuff for 50 people. Bring your own food, drinks,\n            entertainment, and survival gear! If you are one of the lucky\n            ones you will get a letter delivered to you by owl. This\n            letter will have the directions and time of departure.. note\n            this letter will disintegrate after being read.\n          </p>\n          <img\n            src='https://www.mapquestapi.com/staticmap/v5/map?key=jAuMBn6SemqglGEvttlGDZiDyMwOn7SL&locations=Highway 16 East, British Columbia, Canada&defaultMarker=marker-red-lg'\n            alt='map of Highway 16 East, British Columbia, Canada'\n          />\n        </div>\n      );\n    } else \n    return (\n      <h2>Select a Bunker!</h2>\n    )\n  };\n\n  render() {\n    return (\n    <section className='clearfix'>\n      <div className='mapLeft'>\n        {this.getMap()}\n      </div>\n      <MapDirections bunker={this.props.choice} />\n    </section>\n    )\n  }\n}\n\nexport default Map;\n","import React, { Component } from 'react';\nimport './App.css';\nimport './styles/map.css';\nimport firebase from 'firebase';\nimport Login from './components/Login.js';\nimport Intro from './components/Intro.js';\nimport Bunker from './components/Bunker.js';\nimport Footer from './components/Footer.js';\nimport Header from './components/Header.js';\nimport Map from './components/Map.js';\n\n//sets google as the authentication provider thru firebase\nconst provider = new firebase.auth.GoogleAuthProvider();\nconst auth = firebase.auth();\n\n//we changed database read and write rules in firebase \nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      userName: null,\n      bunker: \"alex\"\n    };\n  }\n  //set state by default to null (upon home page load, no username)\n\n  //function that gets the user in upon clicking the 'login' button (conditionally rendered)\n  login = () => {\n    auth.signInWithPopup(provider).then(result => {\n      const user = result.user;\n      this.setState({\n        userName: user\n      });\n    });\n  };\n\n  //function that logs out upon clicking the 'logout' button\n  logout = () => {\n    auth.signOut().then(() => {\n      this.setState({\n        userName: null\n      });\n    });\n  };\n\n  guest = () => {\n    const guestName = {\n      displayName: \"Guest\"\n    };\n    this.setState({\n      userName: guestName\n    });\n  };\n\n  setBunker = event => {\n    //Search for specific bunker from bunkerList and set as current Bunker\n    //2. Make firebase call get info on specific bunker? Set as list\n    const bunkerChoice = event.target.value;\n    this.setState({\n      bunker: bunkerChoice\n    });\n  };\n\n  //upon page load, if a user is logged in, persist the login\n  componentDidMount() {\n    //Fetch All Bunkers\n    auth.onAuthStateChanged(user => {\n      if (user) {\n        this.setState({\n          userName: user\n        });\n      }\n    });\n  }\n  render() {\n\n\n    return (\n      /*pass dynamic CSS background image based on 'bunker'*/\n      <div className={`App + ${this.state.bunker}`}>\n        {this.state.userName ? (\n          <Header logout={this.logout} user={this.state.userName.displayName} />\n        ) : null}\n        <div className=\"wrapper\">\n          <main>\n            <div>\n              {/* used ternary operator to check if userName is truthy then show Bunker component otherwise show Login component */}\n              {this.state.userName ?\n                <div>\n                  <Intro />\n                  <form className=\"bunkerNames\" action=\"\" onChange={this.setBunker}>\n\n                      <input type=\"radio\" name=\"bunkerChoice\" defaultChecked=\"alex\" id=\"alex\" value=\"alex\" />\n                      <label htmlFor='alex'><span>Alex's</span> Bunker</label>\n               \n                      <input type=\"radio\" name=\"bunkerChoice\" id=\"glen\" value=\"glen\" />\n                      <label htmlFor=\"glen\"><span>Glen's</span> Bunker</label>\n                 \n                      <input type=\"radio\" name=\"bunkerChoice\" id=\"oiza\" value=\"oiza\" />\n                      <label htmlFor=\"oiza\"><span>Oiza's</span> Bunker</label>\n                  \n                      <input type=\"radio\" name=\"bunkerChoice\" id=\"zoe\" value=\"zoe\" /> <label htmlFor=\"zoe\"><span>Zoe's</span> Bunker</label>\n                  </form>\n\n                  <Bunker\n                    userName={this.state.userName}\n                    choice={this.state.bunker}\n                  />\n                  <div className=\"mapSection\">\n                    <Map choice={this.state.bunker}/>\n                  </div>\n                </div>\n               : \n                <Login\n                  userName={this.state.userName}\n                  login={this.login}\n                  guest={this.guest}\n                />\n              }\n            </div>\n          </main>\n          <Footer />\n        </div>\n      </div>\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}